# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WARMGIS_Tools
                                 A QGIS plugin
 Water Management Tools
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-04-12
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Rafael Kayser
        email                : rafael.hbkayser@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""



import os, sys, datetime
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.dates as dates
import numpy as np



from . import resources
from . import shapefile
from matplotlib.ticker import FuncFormatter
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, QVariant, Qt, QVersionNumber, QObject, pyqtSignal
from qgis.core import *
from qgis.gui import *
from pylab import *

from qgis.gui import QgsMapToolEmitPoint 
#from PyQt5.QtWidgets import QAction, QMainWindow, QApplication, QMessageBox, QFileDialog, QgsVectorLayer  #, QgsProject ,
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtGui import QColor
from os import path
from PyQt5.QtWidgets import *
from csv import reader



from .WARMWidget import Widget
from .WARMWidget import wid_open_proj
from .WARMWidget import wid_run_balance
from .WARMWidget import wid_run_qual

from .WARMWidget import wid_ins_wit_pon
from .WARMWidget import wid_ins_wit_tab

from .WARMWidget import wid_ins_lan_pon
from .WARMWidget import wid_ins_lan_tab

from .WARMWidget import wid_ins_stream_data
from .WARMWidget import wid_qual_par
from .WARMWidget import wid_qual_obs


from .WARMWidget import wid_ins_res_pon



from .model_quality import Quality_Model
from .model_balance import Balance_Model


from .model_auxiliar import create_drl_from_iph, create_fields_wit, create_fields_efl, create_fields_res, read_streamflow_file, conf_drl_bho, save_parameters_drl 





# Import the code for the DockWidget
from .WARMGIS_Tools_dockwidget import WARMGIS_ToolsDockWidget
import os.path


class WARMGIS_Tools:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        
        # Save reference to the QGIS interface
        self.iface = iface
        self.dockwidget = Widget()  #main interface
        self.canvas = self.iface.mapCanvas()
        

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'WARMGIS_Tools_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&WARM-GIS Tools')
        # TODO: We are going to let the user set this up in a future iteration
        #self.toolbar = self.iface.addToolBar(u'WARMGIS_Tools')
        #self.toolbar.setObjectName(u'WARMGIS_Tools')

        self.toolbar = self.iface.addToolBar('WARM-GIS Tools')
        self.toolbar.setObjectName('WARM-GIS Tools')




        #print "** INITIALIZING WARMGIS_Tools"

        self.pluginIsActive = False
        #self.dockwidget = None
        
        #INICIALIZAR OPÇÕES DO WIDGET
        self.dockwidget.treeWidget.activated.connect(self.process)
        
        
        # TELA CREATE PROJECT
        self.wid_open_proj = wid_open_proj()  #auxiliar interface
        self.wid_open_proj.btn_sel_drl.clicked.connect(self.fc_input_drl)
        self.wid_open_proj.btn_sel_cat.clicked.connect(self.fc_input_cat)
        self.wid_open_proj.btn_sel_efl.clicked.connect(self.fc_input_efl)
        self.wid_open_proj.btn_sel_res.clicked.connect(self.fc_input_res)
        self.wid_open_proj.btn_proj_save.clicked.connect(self.fc_proj_save)        
        self.wid_open_proj.btn_proj_open.clicked.connect(self.fc_proj_open)
        self.wid_open_proj.btn_sel_mini.clicked.connect(self.fc_input_mini)
        
        
        #WITHDRAWALS
        self.wid_open_proj.btn_sel_wit.clicked.connect(self.fc_input_wit)
        
         #WATER BALANCE MODULE
        self.wid_run_balance = wid_run_balance()  # auxiliar interface
        self.wid_run_balance.setWindowFlag(Qt.WindowMinimizeButtonHint, True)
        self.wid_run_balance.btn_bal_sim.clicked.connect(self.fc_balmod_sim)
        self.wid_run_balance.btn_plot_bal.clicked.connect(self.fc_plot_bal)
        
        
        #WATER QUALITY MODEL  
        self.wid_run_qual = wid_run_qual()  # auxiliar interface
        self.wid_run_qual.setWindowFlag(Qt.WindowMinimizeButtonHint, True)
        self.wid_run_qual.btn_run.clicked.connect(self.fc_run_qual) 
        self.wid_run_qual.btn_plot.clicked.connect(self.fc_plot_qual) 
        self.wid_run_qual.psh_path_par.clicked.connect(self.fc_path_csv) 
        #self.wid_run_qual.psh_path_obs.clicked.connect(self.fc_path_folder)
        self.wid_run_qual.psh_path_river.clicked.connect(self.fc_path_csv_river)
        self.wid_run_qual.psh_river_codes.clicked.connect(self.fc_river_codes)
        
        
        #INSERT USER
        self.wid_ins_wit_pon = wid_ins_wit_pon()
        self.wid_ins_wit_pon.psh_ins_wit.clicked.connect(self.fc_ins_wit_pon) 
        
        #INSERT EFFLUENT
        self.wid_ins_lan_pon = wid_ins_lan_pon()
        self.wid_ins_lan_pon.psh_ins_lan.clicked.connect(self.fc_ins_lan_pon)
        
        
        #INSERT WIT TABLE
        self.wid_ins_wit_tab = wid_ins_wit_tab()
        self.wid_ins_wit_tab.psh_path_csv.clicked.connect(self.fc_path_csv2) 
        self.wid_ins_wit_tab.psh_ins_table.clicked.connect(self.fc_ins_wit_tab)         
        self.wid_ins_wit_tab.psh_ins_wit.clicked.connect(self.fc_ins_wit_tab_shape) 
        

        #INSERT EFFLUENT TABLE
        self.wid_ins_lan_tab = wid_ins_lan_tab()
        self.wid_ins_lan_tab.psh_path_csv.clicked.connect(self.fc_path_csv3) 
        self.wid_ins_lan_tab.psh_ins_table.clicked.connect(self.fc_ins_lan_tab)         
        self.wid_ins_lan_tab.psh_ins_lan.clicked.connect(self.fc_ins_lan_tab_shape) 


        #INSERT RESERVOIR
        self.wid_ins_res_pon = wid_ins_res_pon()
        self.wid_ins_res_pon.psh_ins_res.clicked.connect(self.fc_ins_res_pon) 

        
        
        #STREAMFLOW DATA
        self.wid_ins_stream_data = wid_ins_stream_data()
        self.wid_ins_stream_data.psh_sel_stream.clicked.connect(self.fc_path_stream)
        self.wid_ins_stream_data.psh_ins_data.clicked.connect(self.fc_ins_stream)
        
        
        
        #QUALITY PARAMETERS
        self.wid_qual_par = wid_qual_par()
        self.wid_qual_par.setWindowFlag(Qt.WindowMinimizeButtonHint, True)

        
        self.wid_qual_par.psh_confirm_par.clicked.connect(self.fc_config_par)
        self.wid_qual_par.psh_save_file.clicked.connect(self.fc_save_par_file)
        self.wid_qual_par.psh_sel_file_par.clicked.connect(self.fc_open_create_par_qual)
        

        #STREAMFLOW DATA
        self.wid_qual_obs = wid_qual_obs()
        self.wid_qual_obs.psh_path_obs_list.clicked.connect(self.fc_path_csv_list) 
        self.wid_qual_obs.psh_path_obs_data.clicked.connect(self.fc_path_csv_data)
        self.wid_qual_obs.psh_confirm_obs.clicked.connect(self.fc_path_qual_obs)        
        
        
        ###############################################################################
        
        # this QGIS tool emits as QgsPoint after each click on the map canvas
        self.toolchso = QgsMapToolEmitPoint(self.canvas)
        self.tool_effluent = QgsMapToolEmitPoint(self.canvas)
        self.tool_reservoir = QgsMapToolEmitPoint(self.canvas)




        os.chdir('C:')
        self.dir = 'C:/'
        self.plugdir = os.path.dirname(__file__)
        for i in self.plugdir:
            if i == '\\':
                self.plugdir = self.plugdir.replace('\\', '/')
        
        
    def fc_path_csv(self):
        
        name2 = QFileDialog.getOpenFileName(parent=self.wid_run_qual, caption='Input', filter='CSV files (*.csv)', directory=self.dir)
        name2=name2[0]
        
        self.dir = os.path.dirname(name2) + '/'
        
        for i in name2:
            if i == '\\':
                name2 = name2.replace('\\', '/')

        self.wid_run_qual.lin_path_par.setText(name2)



    def fc_path_csv2(self):
        
        name2 = QFileDialog.getOpenFileName(parent=self.wid_ins_wit_tab, caption='Input', filter='CSV files (*.csv)', directory=self.dir)
        name2=name2[0]
        
        self.dir = os.path.dirname(name2) + '/'
        
        for i in name2:
            if i == '\\':
                name2 = name2.replace('\\', '/')

        self.wid_ins_wit_tab.lin_path.setText(name2)
        

    def fc_path_csv3(self):
        
        name2 = QFileDialog.getOpenFileName(parent=self.wid_ins_lan_tab, caption='Input', filter='CSV files (*.csv)', directory=self.dir)
        name2=name2[0]
        
        self.dir = os.path.dirname(name2) + '/'
        
        for i in name2:
            if i == '\\':
                name2 = name2.replace('\\', '/')

        self.wid_ins_lan_tab.lin_path.setText(name2)


     ############

    def fc_path_csv_list(self):
        
        name2 = QFileDialog.getOpenFileName(parent=None, caption='Input', filter='CSV files (*.csv)', directory=self.dir)
        name2=name2[0]
        
        self.dir = os.path.dirname(name2) + '/'
        
        for i in name2:
            if i == '\\':
                name2 = name2.replace('\\', '/')

        self.wid_qual_obs.lin_path_list.setText(name2)
        

    def fc_path_csv_data(self):
        
        name2 = QFileDialog.getOpenFileName(parent=None, caption='Input', filter='CSV files (*.csv)', directory=self.dir)
        name2=name2[0]
        
        self.dir = os.path.dirname(name2) + '/'
        
        for i in name2:
            if i == '\\':
                name2 = name2.replace('\\', '/')

        self.wid_qual_obs.lin_path_data.setText(name2)



    def fc_path_csv_river(self):
        
        name2 = QFileDialog.getOpenFileName(parent=None, caption='Input', filter='text files (*.txt)', directory=self.dir)
        name2=name2[0]
        
        self.dir = os.path.dirname(name2) + '/'
        
        for i in name2:
            if i == '\\':
                name2 = name2.replace('\\', '/')
                
        rows=[]
        self.rivernames=[]
        self.upcods=[]
        self.downcods=[]
                
                
        with open(name2, 'r',encoding='utf-8') as read_obj:
            csv_reader = reader(read_obj, delimiter=';')
            header = next(csv_reader)
            if header != None: 
                for row in csv_reader:
                    rows.append(row)
                        
                        
        for i in range(len(rows)):
            self.rivernames.append(str(rows[i][0]))
            self.upcods.append(int(rows[i][1]))
            self.downcods.append(int(rows[i][2]))
            
            
        for rivername in self.rivernames:
            self.wid_run_qual.cbx_rivername.addItem(rivername)
            
    
    def fc_river_codes(self):
        
        
        rivername_sel = self.wid_run_qual.cbx_rivername.currentText()
        

        ind = np.array(np.where(np.array(self.rivernames) == rivername_sel))
        pos=ind[0,0]
        
        upcode_sel = self.upcods[pos]
        downcode_sel = self.downcods[pos]
        
        
        self.wid_run_qual.lin_ups_code.setText(str(upcode_sel))
        self.wid_run_qual.lin_down_code.setText(str(downcode_sel))





        
    def fc_path_stream(self):

        name2 = QFileDialog.getOpenFileName(parent=self.wid_ins_wit_tab, caption='Input', filter='Text files (*.txt)', directory=self.dir)
        name2=name2[0]
        
        self.dir = os.path.dirname(name2) + '/'
        
        for i in name2:
            if i == '\\':
                name2 = name2.replace('\\', '/')

        self.wid_ins_stream_data.lin_path_str.setText(name2)









        
    def fc_path_folder(self):
        
        
        #path = QFileDialog.getExistingDirectory(0, ("Select Output Folder"), QDir.currentPath());
        path = QFileDialog.getExistingDirectory(parent=self.wid_run_qual, caption= "Select folder with observed quality data", directory=self.dir);
        
        
        self.dir = os.path.dirname(path) + '/'       
        path =path + '/'

        for i in path:
            if i == '\\':
                path = path.replace('\\', '/')

        #self.wid_run_qual.lin_path_obs.setText(path)        
        


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('WARMGIS_Tools', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        
        
        self.action = QAction(QIcon(self.plugdir + '/icon.png'), 'WARM-GIS Tools', self.iface.mainWindow())
        self.action.triggered.connect(self.run)
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu('&IPH - Plugins', self.action)
        
        
        '''
        icon_path = ':/plugins/WARMGIS_Tools/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u''),
            callback=self.run,
            parent=self.iface.mainWindow())
        '''
        
        
        #clique no mapa
        self.toolchso.canvasClicked.connect(self.clic_wit) #Certo
        self.tool_effluent.canvasClicked.connect(self.clic_efl) #Certo
        self.tool_reservoir.canvasClicked.connect(self.clic_res)
        
        
        
        

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING WARMGIS_Tools"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD WARMGIS_Tools"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&WARM-GIS Tools'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING WARMGIS_Tools"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = WARMGIS_ToolsDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            self.dockwidget.show()
            
            
# A PARTIR DAQUI, DESENVOLVIMENTO PROPRIO ----------------------------------------------------------------- 
            
            
    def process(self):

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Open / Create project', Qt.MatchRecursive,0)):
            self.wid_open_proj.show()

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Withdrawals - Manual insertion', Qt.MatchRecursive,0)):
            self.canvas.setMapTool(self.toolchso)

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Withdrawals - Table insertion', Qt.MatchRecursive,0)):
            self.wid_ins_wit_tab.show()

            
        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Point effluent - Manual insertion', Qt.MatchRecursive,0)):
            self.canvas.setMapTool(self.tool_effluent)            

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Point effluent - Table insertion', Qt.MatchRecursive,0)):
            self.wid_ins_lan_tab.show() 


        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Insert reservoir data', Qt.MatchRecursive,0)):
            self.canvas.setMapTool(self.tool_reservoir)

            

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Water Balance Module', Qt.MatchRecursive,0)):
            self.wid_run_balance.show()
        

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Insert water quality observed data', Qt.MatchRecursive,0)):
            self.wid_qual_obs.show()  

        
        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Model parameters', Qt.MatchRecursive,0)):
            
            self.fc_config_qual_par()
            self.wid_qual_par.show()            
        
        
        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Run simulation', Qt.MatchRecursive,0)):
            self.wid_run_qual.show()            



        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Discharge data', Qt.MatchRecursive,0)):
            self.wid_ins_stream_data.show()
            
            
            

        # VISUALIZATION 
        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Scenario 1', Qt.MatchRecursive,0)):
            self.fc_render_bal(1)
            
        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Scenario 2', Qt.MatchRecursive,0)):
            self.fc_render_bal(2)

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Scenario 3', Qt.MatchRecursive,0)):
            self.fc_render_bal(3)

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Scenario 4', Qt.MatchRecursive,0)):
            self.fc_render_bal(4)

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Scenario 5', Qt.MatchRecursive,0)):
            self.fc_render_bal(5)

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Scenario 6', Qt.MatchRecursive,0)):
            self.fc_render_bal(6)

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Scenario 7', Qt.MatchRecursive,0)):
            self.fc_render_bal(7)

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Scenario 8', Qt.MatchRecursive,0)):
            self.fc_render_bal(8)

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Scenario 9', Qt.MatchRecursive,0)):
            self.fc_render_bal(9)

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Scenario 10', Qt.MatchRecursive,0)):
            self.fc_render_bal(10)

        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Scenario 11', Qt.MatchRecursive,0)):
            self.fc_render_bal(11)            
            
        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Scenario 12', Qt.MatchRecursive,0)):
            self.fc_render_bal(12)                 
            
        # quality model
        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('BOD', Qt.MatchRecursive,0)):
            self.fc_render_qual('BOD')
            
        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Dissolved Oxigen', Qt.MatchRecursive,0)):
            self.fc_render_qual('DO')            
            
        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Total Phosphorus', Qt.MatchRecursive,0)):
            self.fc_render_qual('Pt')            
            
        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Coliforms', Qt.MatchRecursive,0)):
            self.fc_render_qual('Col')            
            
        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Ammon Nitrogen', Qt.MatchRecursive,0)):
            self.fc_render_qual('Na')            
            
        if str('[' + str(self.dockwidget.treeWidget.currentItem()) + ']') == str(
                self.dockwidget.treeWidget.findItems('Nitrate', Qt.MatchRecursive,0)):
            self.fc_render_qual('Nn')            
            

             
    #--------------------------------------------------------------------------------
    def fc_input_drl(self):

        name = QFileDialog.getOpenFileName(parent=self.wid_open_proj, caption='Input', filter='Shapefiles (*.shp)')
        name = name[0]

        self.dir = os.path.dirname(name) + '/'

        for i in name:          
            if i == '\\':
                name = name.replace('\\', '/')

        self.wid_open_proj.lin_path_drl.setText(name)
        

    # ----------------------------------------------------------------------------
    def fc_input_cat(self):

        name = QFileDialog.getOpenFileName(parent=self.wid_open_proj, caption='Input', filter='Shapefiles (*.shp)')
        name = name[0]

        self.dir = os.path.dirname(name) + '/'

        for i in name:
            if i == '\\':
                name = name.replace('\\', '/')

        self.wid_open_proj.lin_path_cat.setText(name)




    # ----------------------------------------------------------------------------
    def fc_input_wit(self):
        
        
        if self.wid_open_proj.rbt_wit_new.isChecked()==True:
        
            name = QFileDialog.getSaveFileName(parent=self.wid_open_proj, caption='Create new input file', filter='.Shapefiles (*.shp)')
            name = name[0]
            self.dir = os.path.dirname(name) + '/'
            for i in name:
              if i == '\\':
                 name = name.replace('\\', '/')
                 
            fields = QgsFields()
            
            fields = create_fields_wit(fields)
            
            
            crs = QgsCoordinateReferenceSystem("EPSG:4326")
            writer = QgsVectorFileWriter(name,
                             "Withdrawals",
                             fields,
                             QgsWkbTypes.Point, #### instead of QGis.WKBPoint
                             crs, #### instead of None
                             "ESRI Shapefile")
            
            self.wid_open_proj.lin_path_wit.setText(name)
            

   
        if self.wid_open_proj.rbt_wit_sel.isChecked()==True:
        

            name = QFileDialog.getOpenFileName(parent=self.wid_open_proj, caption='Select input file previously configured', filter='Shapefiles (*.shp)')
            name = name[0]

            self.dir = os.path.dirname(name) + '/'

            for i in name:
                if i == '\\':
                    name = name.replace('\\', '/')

            self.wid_open_proj.lin_path_wit.setText(name)            
        
        
    # ----------------------------------------------------------------------------
    

    
    def fc_input_efl(self):
        
        
        if self.wid_open_proj.rbt_efl_new.isChecked()==True:
        
            name = QFileDialog.getSaveFileName(parent=self.wid_open_proj, caption='Create new input file', filter='.Shapefiles (*.shp)')
            name = name[0]
            self.dir = os.path.dirname(name) + '/'
            for i in name:
              if i == '\\':
                 name = name.replace('\\', '/')
                 
            fields = QgsFields()
            
            fields = create_fields_efl(fields)
            
            
            crs = QgsCoordinateReferenceSystem("EPSG:4326")
            writer = QgsVectorFileWriter(name,
                             "Effluents",
                             fields,
                             QgsWkbTypes.Point, #### instead of QGis.WKBPoint
                             crs, #### instead of None
                             "ESRI Shapefile")
            
            self.wid_open_proj.lin_path_efl.setText(name)
            

   
        if self.wid_open_proj.rbt_efl_sel.isChecked()==True:
        

            name = QFileDialog.getOpenFileName(parent=self.wid_open_proj, caption='Select input file previously configured', filter='Shapefiles (*.shp)')
            name = name[0]


            self.dir = os.path.dirname(name) + '/'

            for i in name:
                if i == '\\':
                    name = name.replace('\\', '/')

            self.wid_open_proj.lin_path_efl.setText(name)      


    # ----------------------------------------------------------------------------
    def fc_input_res(self):
        
        
        if self.wid_open_proj.rbt_res_new.isChecked()==True:
        
            name = QFileDialog.getSaveFileName(parent=self.wid_open_proj, caption='Create new input file', filter='.Shapefiles (*.shp)')
            name = name[0]
            self.dir = os.path.dirname(name) + '/'
            for i in name:
              if i == '\\':
                 name = name.replace('\\', '/')
                 
            fields = QgsFields()
            
            fields = create_fields_res(fields)
            
            
            crs = QgsCoordinateReferenceSystem("EPSG:4326")
            writer = QgsVectorFileWriter(name,
                             "Reservoirs",
                             fields,
                             QgsWkbTypes.Point, #### instead of QGis.WKBPoint
                             crs, #### instead of None
                             "ESRI Shapefile")
            
            self.wid_open_proj.lin_path_res.setText(name)
            

   
        if self.wid_open_proj.rbt_res_sel.isChecked()==True:
        

            name = QFileDialog.getOpenFileName(parent=self.wid_open_proj, caption='Select input file previously configured', filter='Shapefiles (*.shp)')
            name = name[0]


            self.dir = os.path.dirname(name) + '/'

            for i in name:
                if i == '\\':
                    name = name.replace('\\', '/')

            self.wid_open_proj.lin_path_res.setText(name)          
        

        


    # ----------------------------------------------------------------------------
    def fc_input_mini(self):

        name = QFileDialog.getOpenFileName(parent=self.wid_open_proj, caption='Input', filter='MINI file (*.gtp)')

        name = name[0]

        self.dir = os.path.dirname(name) + '/'

        for i in name:
            if i == '\\':
                name = name.replace('\\', '/')

        self.wid_open_proj.lin_path_mini.setText(name)
        

        
        # ----------------------------------------------------------------------------
    def fc_proj_save(self):
         
      try:
                      
        #TOPOLOGY
        if self.wid_open_proj.rbt_new_arc.isChecked()==True:
            mode = 'arc'
        if self.wid_open_proj.rbt_new_iph.isChecked()==True:
            mode = 'iph'
        if self.wid_open_proj.rbt_new_ana.isChecked()==True:
            mode = 'ana'
        if self.wid_open_proj.rbt_defined.isChecked()==True:
            mode = 'def'            


            
        #MODULE
        if self.wid_open_proj.rbt_bal_module.isChecked()==True:
            module = 'bal'
        
        if self.wid_open_proj.rbt_qual_module.isChecked()==True:
            module = 'qual'                    
            
            


        path_shp_drl = self.wid_open_proj.lin_path_drl.text()
        path_shp_cat = self.wid_open_proj.lin_path_cat.text()
        path_shp_wit = self.wid_open_proj.lin_path_wit.text()
        path_shp_efl = self.wid_open_proj.lin_path_efl.text()
        path_shp_res = self.wid_open_proj.lin_path_res.text()
       
    
        self.lyr_drl = QgsVectorLayer(path_shp_drl, 'Drainage Line', 'ogr')
        self.lyr_cat = QgsVectorLayer(path_shp_cat, 'Catchments', 'ogr')
        self.lyr_wit = QgsVectorLayer(path_shp_wit, 'Withdrawals', 'ogr')
        
        
        if path_shp_efl != "":
            self.lyr_efl = QgsVectorLayer(path_shp_efl, 'Effluents', 'ogr')
        else:
            self.lyr_efl = QgsVectorLayer("Point?crs=EPSG:4326", "Effluents", "memory") # create memory layer in WGS84
        

        if path_shp_res != "":
            self.lyr_res = QgsVectorLayer(path_shp_res, 'Reservoirs', 'ogr')
        else:
            self.lyr_res = QgsVectorLayer("Point?crs=EPSG:4326", "Reservoirs", "memory") # create memory layer in WGS84



        #CONFIGURE INPUT FILES
        
        if mode == 'iph':
            lyr_drl, lyr_cat = create_drl_from_iph(self, self.lyr_drl, self.lyr_cat, module)
            lyr_drl.setCrs(QgsCoordinateReferenceSystem('EPSG:4326'))
            lyr_cat.setCrs(QgsCoordinateReferenceSystem('EPSG:4326'))  
        

        if mode == 'ana':
            lyr_drl, lyr_cat = conf_drl_bho(self, self.lyr_drl, self.lyr_cat, module)


        
        #WRITE INPUT FILE 

        name = QFileDialog.getSaveFileName(parent=self.wid_open_proj, caption='Save project file', filter='.WARM files (*.WARM)')

        name = name[0]
        self.dir = os.path.dirname(name) + '/'
        for i in name:
              if i == '\\':
                 name = name.replace('\\', '/')


        file = open(str(name), 'w')

        file.write('Vector file paths: \n')
        file.write(path_shp_drl + '\n')
        file.write(path_shp_cat + '\n')
        file.write(path_shp_wit + '\n')
        file.write(path_shp_efl + '\n')
        file.write(path_shp_res + '\n')

        file.close()
        
        
        
        # create a new symbol
        symbol = QgsLineSymbol.createSimple({ 'color': 'blue', 'width': '0.5'})
        self.lyr_drl.renderer().setSymbol(symbol)
        self.lyr_drl.triggerRepaint()
        
        
        sym1 = QgsFillSymbol.createSimple({'color': '#E8E8E8', 'outline_color': 'black'})
        self.lyr_cat.renderer().setSymbol(sym1)
        self.lyr_cat.triggerRepaint()
        
        
        layer = QgsSimpleMarkerSymbolLayer()
        layer.setColor(QColor(107, 142, 35))
        layer.setSize(3)
        symbol = QgsMarkerSymbol()
        symbol.changeSymbolLayer(0, layer)
        self.lyr_efl.setRenderer(QgsSingleSymbolRenderer(symbol))
        self.lyr_efl.triggerRepaint()
        
     
        layer = QgsSimpleMarkerSymbolLayer()
        layer.setColor(QColor(0, 255, 255))
        layer.setSize(3)
        symbol = QgsMarkerSymbol()
        symbol.changeSymbolLayer(0, layer)
        self.lyr_wit.setRenderer(QgsSingleSymbolRenderer(symbol))
        self.lyr_wit.triggerRepaint()
        
        
        if path_shp_res != "":
            layer1 = QgsSimpleMarkerSymbolLayer(QgsSimpleMarkerSymbolLayer.Triangle, 4)
            layer1.setColor(QColor(100, 150, 150))
            layer1.setSize(5)
            symbol1 = QgsMarkerSymbol()
            symbol1.changeSymbolLayer(0, layer1)
            self.lyr_res.setRenderer(QgsSingleSymbolRenderer(symbol1))
            self.lyr_res.triggerRepaint()
        
        
        

        QgsProject.instance().addMapLayer(self.lyr_cat)
        QgsProject.instance().addMapLayer(self.lyr_drl)
        QgsProject.instance().addMapLayer(self.lyr_wit)
        if path_shp_efl != "":
            QgsProject.instance().addMapLayer(self.lyr_efl)
        if path_shp_res != "":
            QgsProject.instance().addMapLayer(self.lyr_res)
        

        QMessageBox.information(self.iface.mainWindow(), 'WARM GIS Tools', 'File created successfully!')
        
        
        
        self.wid_open_proj.close()
        

      except:
            
        QMessageBox.information(self.iface.mainWindow(), 'Error!', 'Check input files and verify if topology and simulation module options were selected!')        
        
        
    def fc_proj_open(self):
        
      try:

        name = QFileDialog.getOpenFileName(parent=None, caption='Input', filter='.WARM files (*.WARM)')
        name = name[0]

        self.dir = os.path.dirname(name) + '/'
        for i in name:
            if i == '\\':
                name = name.replace('\\', '/')
                
                
                
        list_input = []
        from csv import reader        
                
        with open(str(name), 'r', encoding='utf-8') as read_obj:
            csv_reader = reader(read_obj, delimiter=';')
            header = next(csv_reader)
            # Check file as empty
            if header != None:
                # Iterate over each row after the header in the csv
                for row in csv_reader:
                    # row variable is a list that represents a row in csv
                    list_input.append(row)
            
        path_shp_drl = list_input[0][0]
        path_shp_cat = list_input[1][0]
        path_shp_wit = list_input[2][0]
        
        try:
            path_shp_efl = list_input[3][0]
        except:
            path_shp_efl = ""
            
        try:
            path_shp_res = list_input[4][0]
        except:
            path_shp_res = ""            
            

        self.lyr_drl = QgsVectorLayer(path_shp_drl, 'Drainage Line' , 'ogr')
        self.lyr_cat = QgsVectorLayer(path_shp_cat, 'Catchments', 'ogr')
        self.lyr_wit = QgsVectorLayer(path_shp_wit, 'Withdrawals', 'ogr')
        self.lyr_efl = QgsVectorLayer(path_shp_efl, 'Effluents', 'ogr')        
        
        
        
        if path_shp_res != "":
            self.lyr_res = QgsVectorLayer(path_shp_res, 'Reservoirs', 'ogr')
            
            

        
        
        # create a new symbol
        symbol = QgsLineSymbol.createSimple({ 'color': 'blue', 'width': '0.5'})
        self.lyr_drl.renderer().setSymbol(symbol)
        self.lyr_drl.triggerRepaint()
        
        
        sym1 = QgsFillSymbol.createSimple({'color': '#E8E8E8', 'outline_color': 'black'})
        self.lyr_cat.renderer().setSymbol(sym1)
        self.lyr_cat.triggerRepaint()
        
        
        
        layer = QgsSimpleMarkerSymbolLayer()
        layer.setColor(QColor(107, 142, 35))
        layer.setSize(3)
        symbol = QgsMarkerSymbol()
        symbol.changeSymbolLayer(0, layer)
        self.lyr_efl.setRenderer(QgsSingleSymbolRenderer(symbol))
        self.lyr_efl.triggerRepaint()
        
     
        
        layer = QgsSimpleMarkerSymbolLayer()
        layer.setColor(QColor(0, 255, 255))
        layer.setSize(3)
        symbol = QgsMarkerSymbol()
        symbol.changeSymbolLayer(0, layer)
        self.lyr_wit.setRenderer(QgsSingleSymbolRenderer(symbol))
        self.lyr_wit.triggerRepaint()
        
        
        if path_shp_res != "":
            layer = QgsSimpleMarkerSymbolLayer(QgsSimpleMarkerSymbolLayer.Triangle, 4)
            layer.setColor(QColor(100, 150, 150))
            layer.setSize(5)
            symbol = QgsMarkerSymbol()
            symbol.changeSymbolLayer(0, layer)
            self.lyr_res.setRenderer(QgsSingleSymbolRenderer(symbol))
            self.lyr_res.triggerRepaint()
        

     
        QgsProject.instance().addMapLayer(self.lyr_cat)
        QgsProject.instance().addMapLayer(self.lyr_drl)
        QgsProject.instance().addMapLayer(self.lyr_wit)
        QgsProject.instance().addMapLayer(self.lyr_efl)
        
        
        if path_shp_res != "":
            QgsProject.instance().addMapLayer(self.lyr_res)
        else:
            #self.lyr_res = QgsVectorLayer("Point", "Reservoirs", "memory")
            self.lyr_res = QgsVectorLayer("Point?crs=EPSG:4326", "Reservoirs", "memory") # create memory layer in WGS84
            #vpoi.setCrs(votherpoly.crs()) # change the coordinate reference system
            
            
            
        self.iface.setActiveLayer(self.lyr_drl)
        self.iface.zoomToActiveLayer()
       


        QMessageBox.information(self.iface.mainWindow(), 'WARM GIS Tools', 'Project successfully opened!')
        
        
        self.wid_open_proj.close()

      except:
            
        QMessageBox.information(self.iface.mainWindow(), 'Error!', 'Check project file input file!')  


        
        
        
    #################################################################################################################
    
    
    def fc_balmod_sim(self):
        

        #numero de cenarios
        nt = int( self.wid_run_balance.cbx_number_sim.currentText())
        
        
        if self.wid_run_balance.rbt_wit_scn.isChecked()==True:
            scn_fix = str("wit")
            scn_number = int(self.wid_run_balance.cbx_wit_scn.currentText())
        
        if self.wid_run_balance.rbt_str_scn.isChecked()==True:
            scn_fix = str("str")
            scn_number = int(self.wid_run_balance.cbx_str_scn.currentText())           

        if self.wid_run_balance.rbt_not_fix.isChecked()==True:
            scn_fix = str("var")
            scn_number = 0  


            

        self.model_bal = Balance_Model(self.lyr_drl, self.lyr_wit, self.lyr_res, nt, scn_fix, scn_number)

        self.model_bal.read_files()
        
     
    
        d_qout, d_wbal, d_qdef = self.model_bal.run_model()
        
        
        #d_qout.tofile('C:/Users/rafae/OneDrive/10_warm_gis/teste5.csv',sep=',')
        #np.savetxt("C:/Users/rafae/OneDrive/10_warm_gis/teste5.csv", d_qout, delimiter=",")
        
        
        #write shapefile
        features = self.lyr_drl.getFeatures()
        self.lyr_drl.startEditing()        

       
        
             
        i = 0
        for feat in features:           
            for it in range(nt):
                self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Q_Rem_'+str(it+1)), float(d_qout[i,it]))
                self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('W_Bal_'+str(it+1)), float(d_wbal[i,it]))               
                self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Q_Def_'+str(it+1)), float(d_qdef[i,it]))
                
            for it in range(nt, 12):
                self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Q_Rem_'+str(it+1)), 0)
                self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('W_Bal_'+str(it+1)), 0)               
                self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Q_Def_'+str(it+1)), 0)
                
            i = i + 1

        self.lyr_drl.commitChanges()
        self.lyr_drl.updateFields() 
        
        QMessageBox.information(self.iface.mainWindow(), 'WARM-GIS Tools', 'Simulation completed successfully!')
        


    
    

    def fc_run_qual(self):



        path_par = self.wid_run_qual.lin_path_par.text()
        
 
        
        if self.wid_run_qual.cbx_sim_diffuse.isChecked()==True:
            sim_dif =1
        else:
            sim_dif =0
        


        #define cenario de vazao
        scn_q_str = self.wid_run_qual.cbx_stream.currentText()        
        def switch(case):
            if case == 'Scenario 1':
                return 1
            elif case == 'Scenario 2':                
                return 2
            elif case == 'Scenario 3':               
                return 3    
            
        scn_q_int = int(switch(scn_q_str))
        
        
        self.model_qual = Quality_Model(self.lyr_drl, self.lyr_cat, self.lyr_efl, self.lyr_wit, self.lyr_res, path_par, scn_q_int, sim_dif)
        
        self.model_qual.read_parameters()
        self.model_qual.read_input_files()
        
        
        
        d_obod, d_odo,d_ocol,d_opo,d_opi, d_ono,d_ona, d_onn, d_opt,d_qout, d_wbal, d_enqbod,d_enqdo,d_enqpt,d_enqcol,d_enqna, d_enqtot = self.model_qual.run_model()
        
        
        
        
        #write shapefile
        features = self.lyr_drl.getFeatures()
        self.lyr_drl.startEditing()
        

        i = 0
        for feat in features:
            
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Conc_BOD'), float(d_obod[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Conc_DO'), float(d_odo[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Conc_Col'), float(d_ocol[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Conc_Po'), float(d_opo[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Conc_Pi'), float(d_opi[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Conc_No'), float(d_ono[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Conc_Na'), float(d_ona[i,0]))
            #self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Conc_Ni'), float(d_oni[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Conc_Nn'), float(d_onn[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Conc_Pt'), float(d_opt[i,0]))
            
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Q_Rem_1'), float(d_qout[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('W_Bal_1'), float(d_wbal[i,0]))
            
            
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Enq_BOD'), int(d_enqbod[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Enq_DO'), int(d_enqdo[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Enq_Col'), int(d_enqcol[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Enq_Pt'), int(d_enqpt[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Enq_Na'), int(d_enqna[i,0]))
            self.lyr_drl.changeAttributeValue(feat.id(), self.lyr_drl.fields().indexFromName('Enq_Tot'), int(d_enqtot[i,0]))
            
            
            i = i + 1

        self.lyr_drl.commitChanges()
        self.lyr_drl.updateFields() 


        QMessageBox.information(self.iface.mainWindow(), 'WARM-GIS Tools', 'Simulation completed successfully!')
        


    def fc_plot_qual(self):
        
        

        
        #path_obs = self.wid_run_qual.lin_path_obs.text()
        
        ups_code = self.wid_run_qual.lin_ups_code.text()
        down_code = self.wid_run_qual.lin_down_code.text()
        plot_par = self.wid_run_qual.cbx_par.currentText()
        
        
        def switch(case):
            if case == 'BOD':
                return 'BOD'
            elif case == 'Dissolved Oxigen':                
                return 'DO'
            elif case == 'Coliforms':               
                return 'Col'
            elif case == 'Total Phosphorus':                
                return 'Pt'
            elif case == 'Organic Nitrogen':
                return 'No'
            elif case == 'Ammon Nitrogen':                
                return 'Na'
            elif case == 'Nitrite':               
                return 'Ni'
            elif case == 'Nitrate':                
                return 'Nn'

            elif case == 'All parameters':                
                return 'All'
                

        par_code = switch(plot_par)
        
        
        #if path_obs == '':
        #    path_obs = None
        
        with_obs = self.wid_run_qual.cbx_with_obs.isChecked()
        with_enq = self.wid_run_qual.cbx_with_enq.isChecked()
        with_text = self.wid_run_qual.cbx_with_text.isChecked()
        with_metrics = self.wid_run_qual.cbx_statistics.isChecked()
        
        label_pt = self.wid_run_qual.cbx_label_pt.isChecked()
        
        if not hasattr(self, 'path_stations') or not self.path_stations:
            self.path_stations = None
            
        if not hasattr(self, 'path_obs') or not self.path_obs:
            self.path_obs = None            
            
            
            
        '''
        #checar se os dados observados foram inseridos
        try:
            self.path_stations
        except NameError:
            self.path_stations = None
   
        try:
            self.path_obs
        except NameError:
            self.path_obs = None    
        '''
             
    
        self.model_qual.graph_profile(int(ups_code),int(down_code), str(par_code), with_obs, with_enq, with_text, label_pt, with_metrics, self.path_stations, self.path_obs)
        
        
    def fc_path_qual_obs(self):
        
        
        
        self.path_stations = self.wid_qual_obs.lin_path_list.text()
        self.path_obs = self.wid_qual_obs.lin_path_data.text()
        
        QMessageBox.information(self.iface.mainWindow(), 'WARM-GIS Tools', 'Files inserted successfully!')
        
        
        self.wid_qual_obs.close()
        
        


    def fc_plot_bal(self):
        

        ups_code = self.wid_run_balance.lin_ups_code.text()
        down_code = self.wid_run_balance.lin_down_code.text()
        plot_par = self.wid_run_balance.cbx_par.currentText()
        
        
        def switch(case):
            if case == 'Scenario 1':
                return 1
            elif case == 'Scenario 2':                
                return 2
            elif case == 'Scenario 3':               
                return 3
            elif case == 'Scenario 4':                
                return 4
            elif case == 'Scenario 5':
                return 5
            elif case == 'Scenario 6':                
                return 6

            elif case == 'Scenario 7':
                return 7
            elif case == 'Scenario 8':                
                return 8
            elif case == 'Scenario 9':               
                return 9
            elif case == 'Scenario 10':                
                return 10
            elif case == 'Scenario 11':
                return 11
            elif case == 'Scenario 12':                
                return 12

                
        par_code = switch(plot_par)
        

        with_text = self.wid_run_balance.cbx_with_text.isChecked()
        
        
        self.model_bal.graph_profile(int(ups_code),int(down_code), int(par_code), with_text)



    def fc_render_bal(self, n):
            

        targetField = 'W_Bal_'+ str(n)
        rangeList = []
        
        
        wid=0.5

        # CLASS 1
        symbol1 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
        symbol1.setColor(QColor('#BEBEBE'))  #grey
        symbol1.setWidth(wid)
        range1 = QgsRendererRange(0, 0.1, symbol1, '<0.1%')
        rangeList.append(range1)
        
        
        # CLASS 2
        symbol2 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
        symbol2.setColor(QColor('#00BFFF'))  #CYAN
        symbol2.setWidth(wid)
        range2 = QgsRendererRange(0.101, 10, symbol2, '0.1% - 10%')
        rangeList.append(range2)      
        
        
        # CLASS 3
        symbol3 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
        symbol3.setColor(QColor('#ADFF2F'))  #GreenYellow
        symbol3.setWidth(wid)
        range3 = QgsRendererRange(10.001, 25, symbol3, '10.1% - 25%')
        rangeList.append(range3)          
        
        # CLASS 4
        symbol4 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
        symbol4.setColor(QColor('#FFFF00'))  #YELLOW
        symbol4.setWidth(wid)
        range4 = QgsRendererRange(25.001, 50, symbol4, '25.1% - 50%')
        rangeList.append(range4)

        # CLASS 5
        symbol5 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
        symbol5.setColor(QColor('#FFA500'))  #ORANGE
        symbol5.setWidth(wid)
        range5 = QgsRendererRange(50.001, 75, symbol5, '50.1% - 75%')
        rangeList.append(range5)

        # CLASS 6
        symbol6 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
        symbol6.setColor(QColor('#FF0000'))  #RED
        symbol6.setWidth(wid)
        range6 = QgsRendererRange(75.001, 99, symbol6, '75.1% - 99%')
        rangeList.append(range6)

        # CLASS 7
        symbol7 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
        symbol7.setColor(QColor('#8B0000'))  #DARK RED
        symbol7.setWidth(wid)
        range7 = QgsRendererRange(99.001, 100, symbol7, '>99%')
        rangeList.append(range7)
      


        # create the renderer
        groupRenderer = QgsGraduatedSymbolRenderer('', rangeList)
        groupRenderer.setMode(QgsGraduatedSymbolRenderer.EqualInterval)
        groupRenderer.setClassAttribute(targetField)

        # apply renderer to layer
        self.lyr_drl.setRenderer(groupRenderer)

        # add to QGIS interface
        
        # show the change
        self.lyr_drl.triggerRepaint()
            


    def fc_render_qual(self, par):
        
        wid=0.5
        
        
        if par == 'BOD':
            
            targetField = 'Conc_BOD'
            rangeList = []          
            
            # CLASS 1
            symbol1 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol1.setColor(QColor('#1E90FF'))  #blue
            symbol1.setWidth(wid)
            range1 = QgsRendererRange(0, 3, symbol1, '0 mg/l - 3 mg/l')
            rangeList.append(range1)       
        
            # CLASS 2
            symbol2 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol2.setColor(QColor('#32CD32'))  #green
            symbol2.setWidth(wid)
            range2 = QgsRendererRange(3.0001, 5, symbol2, '3 mg/l - 5 mg/l')
            rangeList.append(range2)             
        
            # CLASS 3
            symbol3 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol3.setColor(QColor('#FFFF00'))  #Yellow
            symbol3.setWidth(wid)
            range3 = QgsRendererRange(5.0001, 10, symbol3, '5 mg/l - 10 mg/l')
            rangeList.append(range3)          
        
            # CLASS 4
            symbol4 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol4.setColor(QColor('#FF0000'))  #YELLOW
            symbol4.setWidth(wid)
            range4 = QgsRendererRange(10.001, 1e10, symbol4, '> 10 mg/l')
            rangeList.append(range4)            
        
        if par == 'Col':
            
            targetField = 'Conc_Col'
            rangeList = []          
            
            # CLASS 1
            symbol1 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol1.setColor(QColor('#1E90FF'))  #blue
            symbol1.setWidth(wid)
            range1 = QgsRendererRange(0, 200, symbol1, '0 mg/l - 200 mg/l')
            rangeList.append(range1)       
        
            # CLASS 2
            symbol2 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol2.setColor(QColor('#32CD32'))  #green
            symbol2.setWidth(wid)
            range2 = QgsRendererRange(200.0001, 1000, symbol2, '200 mg/l - 1000 mg/l')
            rangeList.append(range2)             
        
            # CLASS 3
            symbol3 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol3.setColor(QColor('#FFFF00'))  #Yellow
            symbol3.setWidth(wid)
            range3 = QgsRendererRange(1000.0001, 2500, symbol3, '1000 mg/l - 2500 mg/l')
            rangeList.append(range3)          
        
            # CLASS 4
            symbol4 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol4.setColor(QColor('#FF0000'))  #YELLOW
            symbol4.setWidth(wid)
            range4 = QgsRendererRange(2500.001, 1e20, symbol4, '> 2500 mg/l')
            rangeList.append(range4) 


        if par == 'Pt':
            
            targetField = 'Conc_Pt'
            rangeList = []          
            
            # CLASS 1
            symbol1 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol1.setColor(QColor('#1E90FF'))  #blue
            symbol1.setWidth(wid)
            range1 = QgsRendererRange(0, 0.1, symbol1, '0 mg/l - 0.1 mg/l')
            rangeList.append(range1)       
        
            # CLASS 3
            symbol3 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol3.setColor(QColor('#FFFF00'))  #Yellow
            symbol3.setWidth(wid)
            range3 = QgsRendererRange(0.100001, 0.15, symbol3, '0.1 mg/l - 0.15 mg/l')
            rangeList.append(range3)          
        
            # CLASS 4
            symbol4 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol4.setColor(QColor('#FF0000'))  #YELLOW
            symbol4.setWidth(wid)
            range4 = QgsRendererRange(0.150001, 1e10, symbol4, '> 0.15 mg/l')
            rangeList.append(range4) 

        if par == 'Na':
            
            targetField = 'Conc_Na'
            rangeList = []          
            
            # CLASS 1
            symbol1 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol1.setColor(QColor('#1E90FF'))  #blue
            symbol1.setWidth(wid)
            range1 = QgsRendererRange(0, 3.7, symbol1, '0 mg/l - 3.7 mg/l')
            rangeList.append(range1)       
        
            # CLASS 3
            symbol3 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol3.setColor(QColor('#FFFF00'))  #Yellow
            symbol3.setWidth(wid)
            range3 = QgsRendererRange(3.700001, 13.3, symbol3, '3.7 mg/l - 13.3 mg/l')
            rangeList.append(range3)          
        
            # CLASS 4
            symbol4 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol4.setColor(QColor('#FF0000'))  #YELLOW
            symbol4.setWidth(wid)
            range4 = QgsRendererRange(13.300001, 1e10, symbol4, '> 13.3 mg/l')
            rangeList.append(range4) 


        if par == 'Nn':
            
            targetField = 'Conc_Nn'
            rangeList = []          
            
            # CLASS 1
            symbol1 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol1.setColor(QColor('#1E90FF'))  #blue
            symbol1.setWidth(wid)
            range1 = QgsRendererRange(0, 1, symbol1, '0 mg/l - 1 mg/l')
            rangeList.append(range1)       
        
            # CLASS 3
            symbol3 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol3.setColor(QColor('#FFFF00'))  #Yellow
            symbol3.setWidth(wid)
            range3 = QgsRendererRange(1.000001, 10, symbol3, '1 mg/l - 10 mg/l')
            rangeList.append(range3)          
        
            # CLASS 4
            symbol4 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol4.setColor(QColor('#FF0000'))  #YELLOW
            symbol4.setWidth(wid)
            range4 = QgsRendererRange(10.000001, 1e10, symbol4, '> 10 mg/l')
            rangeList.append(range4) 










        if par == 'DO':
            
            targetField = 'Conc_DO'
            rangeList = []          
            
            # CLASS 1
            symbol1 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol1.setColor(QColor('#1E90FF'))  #blue
            symbol1.setWidth(wid)
            range1 = QgsRendererRange(6, 10, symbol1, '> 6 mg/l')
            rangeList.append(range1)       
        
            # CLASS 2
            symbol2 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol2.setColor(QColor('#32CD32'))  #green
            symbol2.setWidth(wid)
            range2 = QgsRendererRange(5.00001, 6, symbol2, '5 mg/l - 6 mg/l')
            rangeList.append(range2)             
        
            # CLASS 3
            symbol3 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol3.setColor(QColor('#FFFF00'))  #Yellow
            symbol3.setWidth(wid)
            range3 = QgsRendererRange(4.00001, 5, symbol3, '4 mg/l - 5 mg/l')
            rangeList.append(range3)          
        
            # CLASS 4
            symbol4 = QgsSymbol.defaultSymbol(self.lyr_drl.geometryType())
            symbol4.setColor(QColor('#FF0000'))  #YELLOW
            symbol4.setWidth(wid)
            range4 = QgsRendererRange(0, 4, symbol4, '< 4 mg/l')
            rangeList.append(range4)
            
            

        # create the renderer
        groupRenderer = QgsGraduatedSymbolRenderer('', rangeList)
        groupRenderer.setMode(QgsGraduatedSymbolRenderer.EqualInterval)
        groupRenderer.setClassAttribute(targetField)

        # apply renderer to layer
        self.lyr_drl.setRenderer(groupRenderer)

        # add to QGIS interface
        
        # show the change
        self.lyr_drl.triggerRepaint()









###################################################################################################################################################


    def fc_ins_stream(self):
        
        self.lyr_drl = read_streamflow_file(self)
        
        
        
        QMessageBox.information(self.iface.mainWindow(), 'WARM GIS Tools', 'Streamflow data inserted successfully!')
        
        
        self.wid_ins_stream_data.close()
        
        


    def clic_wit(self, point, button):


        self.canvas.unsetMapTool(self.toolchso)
        idcatch = None

        layer = self.lyr_cat
        

        features = layer.getFeatures()
        for feature in features:
            if QgsGeometry.fromPointXY(point).intersects(feature.geometry()):
                idcatch = str(feature.attribute("CodBas_ID"))
        
        long=round(point.x(),4)
        lat=round(point.y(),4)
                

        self.wid_ins_wit_pon.lin_long.setText(str(long))
        self.wid_ins_wit_pon.lin_lat.setText(str(lat))
        
        
        self.wid_ins_wit_pon.lin_codbas.setText(idcatch)
        
        self.wid_ins_wit_pon.show()
      
        
    def fc_ins_wit_pon(self):
        
        long = float(self.wid_ins_wit_pon.lin_long.text())
        lat = float(self.wid_ins_wit_pon.lin_lat.text())
        name = str(self.wid_ins_wit_pon.lin_name.text())
        
        codbas = int(self.wid_ins_wit_pon.lin_codbas.text())
        
        qwit_1 = float(self.wid_ins_wit_pon.lin_qwit_1.text())
        qwit_2 = float(self.wid_ins_wit_pon.lin_qwit_2.text())
        qwit_3 = float(self.wid_ins_wit_pon.lin_qwit_3.text())
        qwit_4 = float(self.wid_ins_wit_pon.lin_qwit_4.text())
        qwit_5 = float(self.wid_ins_wit_pon.lin_qwit_5.text())
        qwit_6 = float(self.wid_ins_wit_pon.lin_qwit_6.text())
        qwit_7 = float(self.wid_ins_wit_pon.lin_qwit_7.text())
        qwit_8 = float(self.wid_ins_wit_pon.lin_qwit_8.text())
        qwit_9 = float(self.wid_ins_wit_pon.lin_qwit_9.text())
        qwit_10 = float(self.wid_ins_wit_pon.lin_qwit_10.text())
        qwit_11 = float(self.wid_ins_wit_pon.lin_qwit_11.text())
        qwit_12 = float(self.wid_ins_wit_pon.lin_qwit_12.text())


        n_features = self.lyr_wit.featureCount() #added line

        pnt = QgsGeometry.fromPointXY(QgsPointXY(long,lat)) 
        feature = QgsFeature()
        feature.setGeometry(pnt)
        feature.setAttributes([n_features]) #added line

        self.lyr_wit.dataProvider().addFeatures([feature])
        self.lyr_wit.updateExtents()
        
        
        ###################################################
        
        
        count =  self.lyr_wit.featureCount()  
        self.lyr_wit.startEditing()
        
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Name'), name)
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Wit_ID'), count)
        
        
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('CodBas_ID'), codbas)   
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Q_Wit_1'), qwit_1)
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Q_Wit_2'), qwit_2)
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Q_Wit_3'), qwit_3)
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Q_Wit_4'), qwit_4)        
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Q_Wit_5'), qwit_5)
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Q_Wit_6'), qwit_6)        
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Q_Wit_7'), qwit_7)
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Q_Wit_8'), qwit_8)
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Q_Wit_9'), qwit_9)
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Q_Wit_10'), qwit_10)        
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Q_Wit_11'), qwit_11)
        self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Q_Wit_12'), qwit_12)           
        
        self.lyr_wit.commitChanges()
        self.lyr_wit.updateFields()
        
        
        self.wid_ins_wit_pon.close()


        QMessageBox.information(self.iface.mainWindow(), 'WARM GIS Tools', 'User successfully inserted!')




        # show the change
        
        self.lyr_wit.triggerRepaint()  
        
        
        
    def clic_efl(self, point, button):


        self.canvas.unsetMapTool(self.toolchso)
        idcatch = None

        layer = self.lyr_cat
        

        features = layer.getFeatures()
        for feature in features:
            if QgsGeometry.fromPointXY(point).intersects(feature.geometry()):
                idcatch = str(feature.attribute("CodBas_ID"))
        
        long=round(point.x(),4)
        lat=round(point.y(),4)
                

        self.wid_ins_lan_pon.lin_long.setText(str(long))
        self.wid_ins_lan_pon.lin_lat.setText(str(lat))
        
        
        self.wid_ins_lan_pon.lin_codbas.setText(idcatch)
        
        self.wid_ins_lan_pon.show()        




    def clic_res(self, point, button):


        self.canvas.unsetMapTool(self.toolchso)
        idcatch = None

        layer = self.lyr_cat
        

        features = layer.getFeatures()
        for feature in features:
            if QgsGeometry.fromPointXY(point).intersects(feature.geometry()):
                idcatch = str(feature.attribute("CodBas_ID"))
        
        long=round(point.x(),4)
        lat=round(point.y(),4)
                

        self.wid_ins_res_pon.lin_long.setText(str(long))
        self.wid_ins_res_pon.lin_lat.setText(str(lat))
        
        
        self.wid_ins_res_pon.lin_codbas.setText(idcatch)
        
        self.wid_ins_res_pon.show() 



    def fc_ins_res_pon(self):
        
        long = float(self.wid_ins_res_pon.lin_long.text())
        lat = float(self.wid_ins_res_pon.lin_lat.text())
        
        name = str(self.wid_ins_res_pon.lin_name.text())
        
        
        codbas = int(self.wid_ins_res_pon.lin_codbas.text())
        
        qsubs = float(self.wid_ins_res_pon.lin_qsubs_1.text())
        qrel = float(self.wid_ins_res_pon.lin_qrel_1.text())
       

        n_features = self.lyr_res.featureCount() #added line

        pnt = QgsGeometry.fromPointXY(QgsPointXY(long,lat)) 
        feature = QgsFeature()
        feature.setGeometry(pnt)
        feature.setAttributes([n_features]) #added line

        self.lyr_res.dataProvider().addFeatures([feature])
        self.lyr_res.updateExtents()
        
        
        ###################################################
        
        
        count =  self.lyr_res.featureCount()  
        self.lyr_res.startEditing()
        
        self.lyr_res.changeAttributeValue(count-1, self.lyr_res.fields().indexFromName('CodBas_ID'), codbas)
        self.lyr_res.changeAttributeValue(count-1, self.lyr_res.fields().indexFromName('Name'), name)
        self.lyr_res.changeAttributeValue(count-1, self.lyr_res.fields().indexFromName('Res_ID'), count)
        self.lyr_res.changeAttributeValue(count-1, self.lyr_res.fields().indexFromName('Q_Subs_1'), qsubs)
        self.lyr_res.changeAttributeValue(count-1, self.lyr_res.fields().indexFromName('Q_Rel_1'), qrel)
       
        
        self.lyr_res.commitChanges()
        self.lyr_res.updateFields()
        
        
        
        
        #################################################################3
        
        
        id_shape=[]
        features = self.lyr_drl.getFeatures()
        for feat in features:
                id_shape.append(feat.attribute("CodBas_ID"))
        
        #write shapefile
        features = self.lyr_drl.getFeatures()
        self.lyr_drl.startEditing()
        
        
        a_ind = np.array(np.where(np.array(id_shape) == codbas))
        ind=a_ind[0][0]
            
        self.lyr_drl.changeAttributeValue(ind, self.lyr_drl.fields().indexFromName('Reserv_ID'), int(count))


        self.lyr_drl.commitChanges()
        self.lyr_drl.updateFields() 
        
        self.wid_ins_res_pon.close()



        # show the change
        
        self.lyr_res.triggerRepaint()  



        QMessageBox.information(self.iface.mainWindow(), 'WARM GIS Tools', 'User successfully inserted!')


    def fc_ins_lan_pon(self):
        
        
        name = str(self.wid_ins_lan_pon.lin_name.text())
        
        long = float(self.wid_ins_lan_pon.lin_long.text())
        lat = float(self.wid_ins_lan_pon.lin_lat.text())
        
        codbas = int(self.wid_ins_lan_pon.lin_codbas.text())
        
        qinflow = float(self.wid_ins_lan_pon.lin_inflow.text())
        bod = float(self.wid_ins_lan_pon.lin_bod.text())
        do = float(self.wid_ins_lan_pon.lin_do.text())
        col = float(self.wid_ins_lan_pon.lin_col.text())
        po = float(self.wid_ins_lan_pon.lin_po.text())
        pi = float(self.wid_ins_lan_pon.lin_pi.text())
        no = float(self.wid_ins_lan_pon.lin_no.text())
        na = float(self.wid_ins_lan_pon.lin_na.text())
        #ni = float(self.wid_ins_lan_pon.lin_ni.text())
        nn = float(self.wid_ins_lan_pon.lin_nn.text())
        

        n_features = self.lyr_efl.featureCount() #added line

        pnt = QgsGeometry.fromPointXY(QgsPointXY(long,lat)) 
        feature = QgsFeature()
        feature.setGeometry(pnt)
        feature.setAttributes([n_features]) #added line

        self.lyr_efl.dataProvider().addFeatures([feature])
        self.lyr_efl.updateExtents()
        
        
        ###################################################
        
        
        count =  self.lyr_efl.featureCount()  
        self.lyr_efl.startEditing()
        
        self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Efl_ID'), count)          
        self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Name'), name)

        self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('CodBas_ID'), codbas)   
        self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Q_Inflow'), qinflow)
        self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_BOD'), bod)
        self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_DO'), do)
        self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_Col'), col)
        self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_Po'), po)        
        self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_Pi'), pi)
        self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_No'), no)        
        self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_Na'), na)
        #self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_Ni'), ni)
        self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_Nn'), nn)        
         
        
        self.lyr_efl.commitChanges()
        self.lyr_efl.updateFields() 



        # show the change
        
        self.lyr_efl.triggerRepaint()
        
        self.wid_ins_lan_pon.close()
        
        
        QMessageBox.information(self.iface.mainWindow(), 'WARM GIS Tools', 'User successfully inserted!')
        
        
    def fc_ins_wit_tab(self):
        
        
        #LEITURA DA TABELA CSV --------------------------------------------------------------------------------------
        
        from csv import reader
        
        path_ = self.wid_ins_wit_tab.lin_path.text()
        nc = int(self.wid_ins_wit_tab.cbx_ndem.currentText())
        
        
        
        rows = []
        with open(path_, 'r', encoding='utf-8') as read_obj:
            csv_reader = reader(read_obj, delimiter=';')
            header = next(csv_reader)
            # Check file as empty
            if header != None:
                # Iterate over each row after the header in the csv
                for row in csv_reader:
                    # row variable is a list that represents a row in csv
                    rows.append(row)
                    
        self.l_userid=[]
        self.l_long=[]
        self.l_lat=[]
        self.l_dem= np.empty((0,nc))
        self.l_codbas=[]
        
                    
        for i in range (len(rows)):

            userid= float(rows[i][0])
            long=float(rows[i][1])
            lat=float(rows[i][2])            
            
            aux=[]
            for ic in range(nc):
                aux = np.append(aux, float(rows[i][3+ic]))
            aux.resize(1,nc)
            
            
            self.l_userid.append(userid)
            self.l_long.append(long)
            self.l_lat.append(lat)
            self.l_dem = np.append(self.l_dem, aux, axis=0)
            
            
        
        #identificação da bacia
        layer = self.lyr_cat
        


        for j in range(len(rows)):
            
            features = layer.getFeatures()
            for feature in features:
                if QgsGeometry.fromPointXY(QgsPointXY(self.l_long[j], self.l_lat[j])).intersects(feature.geometry()):
                    codbas = (feature.attribute("CodBas_ID"))
                    
            self.l_codbas.append(codbas)
         
            
            
        #INSERÇÃO NO TABLE WIDGET ------------------------------------------------------------------------------------------
        
        qTable = self.wid_ins_wit_tab.tableWidget
        #data = ['teste1', 'teste2']
        
        
        nb_row = len(rows)
        nb_col = nc+4
        qTable.setRowCount(nb_row)
        qTable.setColumnCount(nb_col)

        for row in range(nb_row):
            # Add following line to only populate first column
            for col in [0]:
                item = QTableWidgetItem(str(self.l_userid[row]))
                qTable.setItem(row,col,item)
            for col in [1]:
                item = QTableWidgetItem(str(self.l_long[row]))
                qTable.setItem(row,col,item)
            for col in [2]:
                item = QTableWidgetItem(str(self.l_lat[row]))
                qTable.setItem(row,col,item)                

            for col in [3]:
                item = QTableWidgetItem(str(self.l_codbas[row]))
                qTable.setItem(row,col,item) 
            

            for col in range(4,nb_col):
                item = QTableWidgetItem(str(self.l_dem[row,col-4]))
                qTable.setItem(row,col,item)
                
                
                
        list_head=[]
        list_head.append(u'User')
        list_head.append(u'Longitude')
        list_head.append(u'Latitude')
        list_head.append(u'Basin Code')
        
        for ic in range(nc):
            
            list_head.append( u'Withdrawal ' + str(ic+1))
        
        qTable.setHorizontalHeaderLabels(list_head)
        qTable.resizeColumnsToContents()
        
        
        self.nc=nc
        
        #self.wid_ins_wit_tab.close()
        


    def fc_ins_wit_tab_shape(self):
        
        
        #INSERIR NO SHAPEFILE
        
        
        n_features = self.lyr_wit.featureCount() #added line
        
        for iw in range(len(self.l_userid)):
        
        

            pnt = QgsGeometry.fromPointXY(QgsPointXY(self.l_long[iw],self.l_lat[iw])) 
            feature = QgsFeature()
            feature.setGeometry(pnt)
            feature.setAttributes([n_features]) #added line

            self.lyr_wit.dataProvider().addFeatures([feature])
            self.lyr_wit.updateExtents()
        
        
            ###################################################
        
        
            count =  self.lyr_wit.featureCount()  
            self.lyr_wit.startEditing()
        
            self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('CodBas_ID'), self.l_codbas[iw])
            
            self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Wit_ID'), count)
            self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Name'), self.l_userid[iw])
            
            
            for ic in range(self.nc):        
                self.lyr_wit.changeAttributeValue(count-1, self.lyr_wit.fields().indexFromName('Q_Wit_'+ str(ic+1)), float(self.l_dem[iw,ic]))
         
                   
        
        self.lyr_wit.commitChanges()
        self.lyr_wit.updateFields() 

        
        self.lyr_wit.triggerRepaint()
        
        
        QMessageBox.information(self.iface.mainWindow(), 'WARM GIS Tools', 'Users successfully inserted!')
        
        self.wid_ins_wit_tab.close()
        
        
        
        
    def fc_ins_lan_tab(self):
        
        
        #LEITURA DA TABELA CSV --------------------------------------------------------------------------------------
        
        from csv import reader
        
        path_ = self.wid_ins_lan_tab.lin_path.text()
        
        rows = []
        with open(path_, 'r', encoding='utf-8') as read_obj:
            csv_reader = reader(read_obj, delimiter=';')
            header = next(csv_reader)
            # Check file as empty
            if header != None:
                # Iterate over each row after the header in the csv
                for row in csv_reader:
                    # row variable is a list that represents a row in csv
                    rows.append(row)
                    
        self.l_userid=[]
        self.l_long=[]
        self.l_lat=[]
        self.l_codbas=[]
        
        
        self.l_qefl= []
        self.l_cbod= []
        self.l_cdo= []
        self.l_ccol= []
        self.l_cbpo= []
        self.l_cpo= []
        self.l_cpi= []
        self.l_cno= []
        self.l_cna= []
        self.l_cnn= []
        
        

                    
        for i in range (len(rows)):

            userid= float(rows[i][0])
            long=float(rows[i][1])
            lat=float(rows[i][2])
            qefl=float(rows[i][3])
            cbod=float(rows[i][4])
            cdo=float(rows[i][5])
            ccol=float(rows[i][6])
            cpo=float(rows[i][7])
            cpi=float(rows[i][8])
            cno=float(rows[i][9])
            cna=float(rows[i][10])
            cnn=float(rows[i][11])
            

            
            
            self.l_userid.append(userid)
            self.l_long.append(long)
            self.l_lat.append(lat)
            self.l_qefl.append(qefl)
            self.l_cbod.append(cbod)
            self.l_cdo.append(cdo)
            self.l_ccol.append(ccol)
            self.l_cpo.append(cpo)
            self.l_cpi.append(cpi)
            self.l_cno.append(cno)
            self.l_cna.append(cna)
            self.l_cnn.append(cnn)
            
            
            
        
        #identificação da bacia
        layer = self.lyr_cat
        


        for j in range(len(rows)):
            
            features = layer.getFeatures()
            for feature in features:
                if QgsGeometry.fromPointXY(QgsPointXY(self.l_long[j], self.l_lat[j])).intersects(feature.geometry()):
                    codbas = (feature.attribute("CodBas_ID"))
                    
            self.l_codbas.append(codbas)
         
            
            
        #INSERÇÃO NO TABLE WIDGET ------------------------------------------------------------------------------------------
        
        qTable = self.wid_ins_lan_tab.tableWidget
        #data = ['teste1', 'teste2']
        
        
        nb_row = len(rows)
        nb_col = 13
        qTable.setRowCount(nb_row)
        qTable.setColumnCount(nb_col)

        for row in range(nb_row):
            # Add following line to only populate first column
            for col in [0]:
                item = QTableWidgetItem(str(self.l_userid[row]))
                qTable.setItem(row,col,item)
            for col in [1]:
                item = QTableWidgetItem(str(self.l_long[row]))
                qTable.setItem(row,col,item)
            for col in [2]:
                item = QTableWidgetItem(str(self.l_lat[row]))
                qTable.setItem(row,col,item)                

            for col in [3]:
                item = QTableWidgetItem(str(self.l_codbas[row]))
                qTable.setItem(row,col,item) 
            

            for col in [4]:
                item = QTableWidgetItem(str(self.l_qefl[row]))
                qTable.setItem(row,col,item)
            for col in [5]:
                item = QTableWidgetItem(str(self.l_cbod[row]))
                qTable.setItem(row,col,item)
            for col in [6]:
                item = QTableWidgetItem(str(self.l_cdo[row]))
                qTable.setItem(row,col,item)                
            for col in [7]:
                item = QTableWidgetItem(str(self.l_ccol[row]))
                qTable.setItem(row,col,item) 


            for col in [8]:
                item = QTableWidgetItem(str(self.l_cpo[row]))
                qTable.setItem(row,col,item)
            for col in [9]:
                item = QTableWidgetItem(str(self.l_cpi[row]))
                qTable.setItem(row,col,item)
            for col in [10]:
                item = QTableWidgetItem(str(self.l_cno[row]))
                qTable.setItem(row,col,item)                
            for col in [11]:
                item = QTableWidgetItem(str(self.l_cna[row]))
                qTable.setItem(row,col,item) 

            for col in [12]:
                item = QTableWidgetItem(str(self.l_cnn[row]))
                qTable.setItem(row,col,item) 


                
        list_head=[]
        list_head.append(u'User')
        list_head.append(u'Longitude')
        list_head.append(u'Latitude')
        list_head.append(u'Basin Code')
        
        list_head.append(u'Q Effl. (m³/s)')
        list_head.append(u'BOD (ml/l)')
        list_head.append(u'DO (ml/l)')
        list_head.append(u'Coli. (org/100ml)')
        list_head.append(u'Org. P. (ml/l)')
        list_head.append(u'Inorg. P (ml/l)')
        list_head.append(u'Org. N. (ml/l)')
        list_head.append(u'Ammon N. (ml/l)')
        list_head.append(u'Nitrate (ml/l)')


        
        qTable.setHorizontalHeaderLabels(list_head)
        qTable.resizeColumnsToContents()



    def fc_ins_lan_tab_shape(self):
        
        
        #INSERIR NO SHAPEFILE
        
        
        n_features = self.lyr_efl.featureCount() #added line
        
        for ie in range(len(self.l_userid)):
        
        

            pnt = QgsGeometry.fromPointXY(QgsPointXY(self.l_long[ie],self.l_lat[ie])) 
            feature = QgsFeature()
            feature.setGeometry(pnt)
            feature.setAttributes([n_features]) #added line

            self.lyr_efl.dataProvider().addFeatures([feature])
            self.lyr_efl.updateExtents()
        
        
            ###################################################
        
        
            count =  self.lyr_efl.featureCount()  
            self.lyr_efl.startEditing()
        
            self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('CodBas_ID'), self.l_codbas[ie])
            
            
            
            self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Efl_ID'), count)
            self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Name'), self.l_userid[ie])
            
            
            self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Q_Inflow'), self.l_qefl[ie])
            self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_BOD'), self.l_cbod[ie])
            self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_DO'), self.l_cdo[ie])
            self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_Col'), self.l_ccol[ie])
            self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_Po'), self.l_cpo[ie])        
            self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_Pi'), self.l_cpi[ie])
            self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_No'), self.l_cno[ie])        
            self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_Na'), self.l_cna[ie])
            self.lyr_efl.changeAttributeValue(count-1, self.lyr_efl.fields().indexFromName('Conc_Nn'), self.l_cnn[ie]) 
            

                   
        
        self.lyr_efl.commitChanges()
        self.lyr_efl.updateFields() 

        
        self.lyr_efl.triggerRepaint()
        
        
        self.wid_ins_lan_tab.close()
        
        
        QMessageBox.information(self.iface.mainWindow(), 'WARM GIS Tools', 'Users successfully inserted!')        
        
        

##############################################################################################################################
########################## CONFIGURAÇÕES DO ARQUIVO DE PARAMETROS DE QUALIDADE DE ÁGUA #######################################

    def fc_open_create_par_qual(self):
        
        
        if self.wid_qual_par.rbt_new_par.isChecked()==True:
        
            name = QFileDialog.getSaveFileName(parent=self.wid_open_proj, caption='Create new input file', filter='.csv files (*.csv)')
            name = name[0]
            self.dir = os.path.dirname(name) + '/'
            for i in name:
              if i == '\\':
                 name = name.replace('\\', '/')
                 

            
            self.wid_qual_par.lin_path_par.setText(name)
            

   
        if self.wid_qual_par.rbt_open_file.isChecked()==True:
        

            name = QFileDialog.getOpenFileName(parent=self.wid_open_proj, caption='Select input file previously configured', filter='.csv files (*.csv)')
            name = name[0]


            self.dir = os.path.dirname(name) + '/'

            for i in name:
                if i == '\\':
                    name = name.replace('\\', '/')

            self.wid_qual_par.lin_path_par.setText(name)
            

        
        
    def fc_config_qual_par(self):
        
        
        qTable_head = self.wid_qual_par.tab_head

        
        nb_row = 1
        nb_col = 10
        qTable_head.setRowCount(nb_row)
        qTable_head.setColumnCount(nb_col)
        
        for i in range(nb_col):
            qTable_head.setColumnWidth(i,75)

                

        list_head=[]
        list_head.append(u'BOD \n (mg/l)')
        list_head.append(u'DO \n (mg/l)')
        list_head.append(u'Colif. \n (mg/l)')
        list_head.append(u'Organic P. \n (mg/l)')
        list_head.append(u'Inorganic P. \n (mg/l)')
        list_head.append(u'Organic N. \n (mg/l)')
        list_head.append(u'Ammon N. \n (mg/l)')
        list_head.append(u'Nitrate \n (mg/l)')
        list_head.append(u'DO Sat. \n (mg/l)')
        list_head.append(u'Water temp. \n (°C)')
        #list_head.append(u'Koa (d-1)')


        qTable_head.setHorizontalHeaderLabels(list_head)
        #qTable_head.resizeColumnsToContents()    
        
        

        
        
        qTable_par = self.wid_qual_par.tab_par

        nb_row = 0
        nb_col = 12
        qTable_par.setRowCount(nb_row)
        qTable_par.setColumnCount(nb_col)
        
        for i in range(nb_col):
            qTable_par.setColumnWidth(i,66)

                
        list_head=[]
        list_head.append(u'Subbasin')
        list_head.append(u'Kds (d-1)')
        list_head.append(u'Kdd (d-1)')
        list_head.append(u'Ka (d-1)')
        list_head.append(u'Kcol (d-1)')
        list_head.append(u'Koi (d-1)')
        list_head.append(u'Koa (d-1)')
        list_head.append(u'Kan (d-1)')
        list_head.append(u'Kden (d-1)')
        list_head.append(u'Vsmo (m/d)')
        list_head.append(u'Vsp (m/d)')
        list_head.append(u'Vel (m/s)')

        
        qTable_par.setHorizontalHeaderLabels(list_head)
        #qTable_par.resizeColumnsToContents()        
        



        qTable_carga = self.wid_qual_par.tab_carga

        nb_row = 0
        nb_col = 9
        qTable_carga.setRowCount(nb_row)
        qTable_carga.setColumnCount(nb_col)
        
        for i in range(nb_col):
            qTable_carga.setColumnWidth(i,85)

                
        list_head=[]
        list_head.append(u'Subbasin')
        list_head.append(u'Point BOD (%)')
        list_head.append(u'Point Coli. (%)')
        list_head.append(u'Point Pt (%)')
        list_head.append(u'Point Nt (%)')

        list_head.append(u'Diffuse BOD (%)')
        list_head.append(u'Diffuse Coli. (%)')
        list_head.append(u'Diffuse Pt (%)')
        list_head.append(u'Diffuse Nt (%)')

        qTable_carga.setHorizontalHeaderLabels(list_head)
        #qTable_par.resizeColumnsToContents()  






        
    def fc_config_par(self):



        if   self.wid_qual_par.rbt_new_par.isChecked()==True:
            
            
            qTable_head = self.wid_qual_par.tab_head
            row=0

            if (1==1):            

                for col in [0]:
                    item = QTableWidgetItem(str(2))
                    qTable_head.setItem(row,col,item)
                for col in [1]:
                    item = QTableWidgetItem(str(8.5))
                    qTable_head.setItem(row,col,item)
                for col in [2]:
                    item = QTableWidgetItem(str(100))
                    qTable_head.setItem(row,col,item)
                for col in [3]:
                    item = QTableWidgetItem(str(0.01))
                    qTable_head.setItem(row,col,item)
                for col in [4]:
                    item = QTableWidgetItem(str(0.01))
                    qTable_head.setItem(row,col,item)
                for col in [5]:
                    item = QTableWidgetItem(str(0.1))  
                    qTable_head.setItem(row,col,item)
                for col in [6]:
                    item = QTableWidgetItem(str(0.1)) 
                    qTable_head.setItem(row,col,item)
                for col in [7]:
                    item = QTableWidgetItem(str(0.1)) 
                    qTable_head.setItem(row,col,item)
                for col in [8]:
                    item = QTableWidgetItem(str(8.5))
                    qTable_head.setItem(row,col,item)
                for col in [9]:
                    item = QTableWidgetItem(str(20))
                    qTable_head.setItem(row,col,item)
            
            
            nsub = int(self.wid_qual_par.cbx_nsub.currentText())
            qTable_par = self.wid_qual_par.tab_par            
            qTable_par.setRowCount(nsub)
            
            
            #list_sub = np.arange(1, nsub+1)
            
            i=1
            for row in range(nsub):          
                for col in [0]:
                    item = QTableWidgetItem(str(row+1))
                    qTable_par.setItem(row,col,item)
                    i=i=1

                for col in [1]:
                    item = QTableWidgetItem(str(0.6))
                    qTable_par.setItem(row,col,item)
                for col in [2]:
                    item = QTableWidgetItem(str(0.4))
                    qTable_par.setItem(row,col,item)
                for col in [3]:
                    item = QTableWidgetItem(str(2.5))  #ka
                    qTable_par.setItem(row,col,item)
                for col in [4]:
                    item = QTableWidgetItem(str(1.5)) #kcol
                    qTable_par.setItem(row,col,item)
                for col in [5]:
                    item = QTableWidgetItem(str(0.3)) #koi
                    qTable_par.setItem(row,col,item)
                for col in [6]:
                    item = QTableWidgetItem(str(0.25)) #koa
                    qTable_par.setItem(row,col,item)
                for col in [7]:
                    item = QTableWidgetItem(str(0.8)) #kan
                    qTable_par.setItem(row,col,item)
                for col in [8]:
                    item = QTableWidgetItem(str(0.3)) #kden
                    qTable_par.setItem(row,col,item)
                for col in [9]:
                    item = QTableWidgetItem(str(0.1)) #vsmo
                    qTable_par.setItem(row,col,item)
                for col in [10]:
                    item = QTableWidgetItem(str(0.05)) #vsp
                    qTable_par.setItem(row,col,item)
                for col in [11]:
                    item = QTableWidgetItem(str(0.35)) #river vel
                    qTable_par.setItem(row,col,item)
                    

            #TABELA CARGAS 
            
            qTable_cargas = self.wid_qual_par.tab_carga
            qTable_cargas.setRowCount(nsub)
            
            
            #list_sub = np.arange(1, nsub+1)
            

            for row in range(nsub):          
                for col in [0]:
                    item = QTableWidgetItem(str(row+1))
                    qTable_cargas.setItem(row,col,item)
                    

                for col in range(1,9):
                    item = QTableWidgetItem(str(0))
                    qTable_cargas.setItem(row,col,item)


        ############################################################################################################

        elif self.wid_qual_par.rbt_open_file.isChecked()==True:
            
            
            from csv import reader
        
            path_par = self.wid_qual_par.lin_path_par.text()
        
            # READ PARAMETERS FILE -------------------------------------------------------------------------
        
            list_input = []
            with open(path_par, 'r', encoding='utf-8') as read_obj:
                csv_reader = reader(read_obj, delimiter=';')
                header = next(csv_reader)
                # Check file as empty
                if header != None:
                    # Iterate over each row after the header in the csv
                    for row in csv_reader:
                        # row variable is a list that represents a row in csv
                        list_input.append(row)

            i_bod= float(list_input[0][1])
            i_do=float(list_input[1][1])
            i_col=float(list_input[2][1])
            i_po=float(list_input[3][1])
            i_pi=float(list_input[4][1])
            i_no=float(list_input[5][1])
            i_na=float(list_input[6][1])
            i_nn=float(list_input[7][1])
            i_satdo=float(list_input[8][1])
            i_temp=float(list_input[9][1])
        
        
            nb = int(list_input[10][1])
        
            kdd = []
            kds=[]
            vsmo=[]
            ka=[]
            kcol=[]
            koi=[]
            vsp=[]
            koa=[]
            kan=[]
            kden=[]
            vel=[]
        
        
            for ib in range(nb):
                kdd.append(float(list_input[12][ib+1]))
                kds.append(float(list_input[13][ib+1]))
                ka.append(float(list_input[14][ib+1]))
                kcol.append(float(list_input[15][ib+1]))
                koi.append(float(list_input[16][ib+1]))
                koa.append(float(list_input[17][ib+1]))
                kan.append(float(list_input[18][ib+1]))
                kden.append(float(list_input[19][ib+1]))    
                vsmo.append(float(list_input[20][ib+1]))
                vsp.append(float(list_input[21][ib+1]))                   
                vel.append(float(list_input[22][ib+1]))
            
            
            red_bodp = []
            red_colp=[]
            red_ptp=[]
            red_ntp=[]
            red_bodd=[]
            red_cold=[]
            red_ptd=[]
            red_ntd=[]

        
            for ib in range(nb):
                red_bodp.append(float(list_input[24][ib+1]))
                red_colp.append(float(list_input[25][ib+1]))
                red_ptp.append(float(list_input[26][ib+1]))
                red_ntp.append(float(list_input[27][ib+1]))
                red_bodd.append(float(list_input[28][ib+1]))
                red_cold.append(float(list_input[29][ib+1]))
                red_ptd.append(float(list_input[30][ib+1]))
                red_ntd.append(float(list_input[31][ib+1]))    
        

            geo_option = str(list_input[33][0])
        
        
            if (geo_option== 'adjusted'):
            
                w_a = float(list_input[33][1])
                w_b = float(list_input[33][2])
                d_c = float(list_input[33][3])
                d_d = float(list_input[33][4])
            
            else:
            
                w_a = ''
                w_b = ''
                d_c = ''
                d_d = ''            

            vel_option = str(list_input[35][0])
        
            if (vel_option=='regression'): 
                vel_reg_a = float(list_input[35][1])
                vel_reg_b = float(list_input[35][2])
            else:
                vel_reg_a = ''
                vel_reg_b = ''
            
            
            ka_option = str(list_input[37][0])
        
        
        
            #inserir dados no widget ************************************************************
        
        
            qTable_head = self.wid_qual_par.tab_head
            row=0

              
            for col in [0]:
                item = QTableWidgetItem(str(i_bod))
                qTable_head.setItem(row,col,item)
            for col in [1]:
                item = QTableWidgetItem(str(i_do))
                qTable_head.setItem(row,col,item)
            for col in [2]:
                item = QTableWidgetItem(str(i_col))
                qTable_head.setItem(row,col,item)
            for col in [3]:
                item = QTableWidgetItem(str(i_pi))
                qTable_head.setItem(row,col,item)
            for col in [4]:
                item = QTableWidgetItem(str(i_po))
                qTable_head.setItem(row,col,item)
            for col in [5]:
                item = QTableWidgetItem(str(i_no))  
                qTable_head.setItem(row,col,item)
            for col in [6]:
                item = QTableWidgetItem(str(i_na)) 
                qTable_head.setItem(row,col,item)
            for col in [7]:
                item = QTableWidgetItem(str(i_nn)) 
                qTable_head.setItem(row,col,item)
            for col in [8]:
                item = QTableWidgetItem(str(i_satdo))
                qTable_head.setItem(row,col,item)
            for col in [9]:
                item = QTableWidgetItem(str(i_temp))
                qTable_head.setItem(row,col,item)
        
        
            #tabela de parametros 
            nsub = nb
            qTable_par = self.wid_qual_par.tab_par            
            qTable_par.setRowCount(nsub)
        

            for row in range(nsub):          
                for col in [0]:
                    item = QTableWidgetItem(str(row+1))
                    qTable_par.setItem(row,col,item)
                for col in [1]:
                    item = QTableWidgetItem(str(kdd[row]))
                    qTable_par.setItem(row,col,item)
                for col in [2]:
                    item = QTableWidgetItem(str(kds[row]))
                    qTable_par.setItem(row,col,item)
                for col in [3]:
                    item = QTableWidgetItem(str(ka[row]))  #ka
                    qTable_par.setItem(row,col,item)
                for col in [4]:
                    item = QTableWidgetItem(str(kcol[row])) #kcol
                    qTable_par.setItem(row,col,item)
                for col in [5]:
                    item = QTableWidgetItem(str(koi[row])) #koi
                    qTable_par.setItem(row,col,item)
                for col in [6]:
                    item = QTableWidgetItem(str(koa[row])) #koa
                    qTable_par.setItem(row,col,item)
                for col in [7]:
                    item = QTableWidgetItem(str(kan[row])) #kan
                    qTable_par.setItem(row,col,item)
                for col in [8]:
                    item = QTableWidgetItem(str(kden[row])) #kden
                    qTable_par.setItem(row,col,item)
                for col in [9]:
                    item = QTableWidgetItem(str(vsmo[row])) #vsmo
                    qTable_par.setItem(row,col,item)
                for col in [10]:
                    item = QTableWidgetItem(str(vsp[row])) #vsp
                    qTable_par.setItem(row,col,item)
                for col in [11]:
                    item = QTableWidgetItem(str(vel[row])) #river vel
                    qTable_par.setItem(row,col,item) 



            #tabela de parametros 
            nsub = nb
            qTable_carga = self.wid_qual_par.tab_carga            
            qTable_carga.setRowCount(nsub)
        

            for row in range(nsub):          
                for col in [0]:
                    item = QTableWidgetItem(str(row+1))
                    qTable_carga.setItem(row,col,item)
                for col in [1]:
                    item = QTableWidgetItem(str(red_bodp[row]))
                    qTable_carga.setItem(row,col,item)
                for col in [2]:
                    item = QTableWidgetItem(str(red_colp[row]))
                    qTable_carga.setItem(row,col,item)
                for col in [3]:
                    item = QTableWidgetItem(str(red_ptp[row]))  #ka
                    qTable_carga.setItem(row,col,item)
                for col in [4]:
                    item = QTableWidgetItem(str(red_ntp[row])) #kcol
                    qTable_carga.setItem(row,col,item)
                for col in [5]:
                    item = QTableWidgetItem(str(red_bodd[row])) #koi
                    qTable_carga.setItem(row,col,item)
                for col in [6]:
                    item = QTableWidgetItem(str(red_cold[row])) #koa
                    qTable_carga.setItem(row,col,item)
                for col in [7]:
                    item = QTableWidgetItem(str(red_ptd[row])) #kan
                    qTable_carga.setItem(row,col,item)
                for col in [8]:
                    item = QTableWidgetItem(str(red_ntd[row])) #kden
                    qTable_carga.setItem(row,col,item)



                    
            self.wid_qual_par.cbx_nsub.setCurrentIndex((nsub))
        
        

            if geo_option=='default values':
                self.wid_qual_par.rbt_geo_fix.setChecked(True)
            elif geo_option=='adjusted':
                self.wid_qual_par.rbt_geo_reg.setChecked(True)
                self.wid_qual_par.lin_w_a.setText(str(w_a))
                self.wid_qual_par.lin_w_b.setText(str(w_b))
                self.wid_qual_par.lin_d_c.setText(str(d_c))
                self.wid_qual_par.lin_d_d.setText(str(d_d))
            
            
            if vel_option == 'fixed':
                self.wid_qual_par.rbt_vel_fix.setChecked(True)
            elif vel_option == 'Manning':
                self.wid_qual_par.rbt_vel_mann.setChecked(True)
            elif vel_option == 'regression':
            
                self.wid_qual_par.rbt_vel_reg.setChecked(True)
                self.wid_qual_par.lin_vel_reg_a.setText(str(vel_reg_a))
                self.wid_qual_par.lin_vel_reg_b.setText(str(vel_reg_b))
                
            elif vel_option == 'continuity':
                self.wid_qual_par.rbt_vel_cont.setChecked(True)
        
        
            if ka_option == 'fixed':
                self.wid_qual_par.rbt_ka_subbasin.setChecked(True)
            elif ka_option == 'Owens':
                self.wid_qual_par.rbt_ka_owens.setChecked(True)
            elif ka_option == 'Tsivoglou':        
                self.wid_qual_par.rbt_ka_tsivoglou.setChecked(True)
            elif ka_option == 'Flores':
                self.wid_qual_par.rbt_ka_flores.setChecked(True)

            elif ka_option == 'Manual':
                self.wid_qual_par.rbt_ka_manual.setChecked(True)        
        


    def fc_save_par_file(self):
        
        

        qTable_head = self.wid_qual_par.tab_head
        
        
        bod = qTable_head.item(0,0).text()
        do = qTable_head.item(0,1).text()
        col = qTable_head.item(0,2).text()
        po = qTable_head.item(0,3).text()
        pi = qTable_head.item(0,4).text()
        no = qTable_head.item(0,5).text()
        na = qTable_head.item(0,6).text()
        nn = qTable_head.item(0,7).text()
        do_sat = qTable_head.item(0,8).text()
        temp = qTable_head.item(0,9).text()
        
        
        qTable_par = self.wid_qual_par.tab_par
        nsub = int(self.wid_qual_par.cbx_nsub.currentText())
        
        nrows = qTable_par.rowCount()
        self.kds1s = []
        self.kdd1s = []
        self.kas = []
        self.kcols = []
        self.kois = []
        self.koas = []
        self.kans = []
        self.kdens = []
        self.vsmos = []
        self.vsps = []
        self.vels = []
 
        for row in range(0,nrows):
            kds1 = float(qTable_par.item(row, 1).text())
            kdd1 = float(qTable_par.item(row, 2).text())
            #kdd2 = float(qTable_par.item(row, 4).text())
            ka = float(qTable_par.item(row, 3).text())
            kcol = float(qTable_par.item(row, 4).text())
            koi = float(qTable_par.item(row, 5).text())
            koa = float(qTable_par.item(row, 6).text())        
            kan = float(qTable_par.item(row, 7).text())
            kden = float(qTable_par.item(row, 8).text())
            vsmo =float( qTable_par.item(row, 9).text())
            vsp = float(qTable_par.item(row, 10).text())
            vel = float(qTable_par.item(row, 11).text())


            self.kds1s.append(kds1)
            #self.kds2s.append(kds2)
            self.kdd1s.append(kdd1)
            #self.kdd2s.append(kdd2)
            self.kas.append(ka)
            self.kcols.append(kcol)
            self.kois.append(koi)
            self.koas.append(koa)        
            self.kans.append(kan)
            self.kdens.append(kden)
            self.vsmos.append(vsmo)
            self.vsps.append(vsp) 
            self.vels.append(vel)


        #TABELA CARGAS 

        qTable_carga = self.wid_qual_par.tab_carga

        
        nrows = qTable_carga.rowCount()
        self.red_bodps = []
        self.red_colps = []
        self.red_ptps = []
        self.red_ntps = []
        self.red_bodds = []
        self.red_colds = []
        self.red_ptds = []
        self.red_ntds = []

 
        for row in range(0,nrows):
            red_bodp = float(qTable_carga.item(row, 1).text())
            red_colp = float(qTable_carga.item(row, 2).text())
            red_ptp = float(qTable_carga.item(row, 3).text())
            red_ntp = float(qTable_carga.item(row, 4).text())
            red_bodd = float(qTable_carga.item(row, 5).text())
            red_cold = float(qTable_carga.item(row, 6).text())        
            red_ptd = float(qTable_carga.item(row, 7).text())
            red_ntd = float(qTable_carga.item(row, 8).text())



            self.red_bodps.append(red_bodp)
            self.red_colps.append(red_colp)
            self.red_ptps.append(red_ptp)
            self.red_ntps.append(red_ntp)
            self.red_bodds.append(red_bodd)
            self.red_colds.append(red_cold)        
            self.red_ptds.append(red_ptd)
            self.red_ntds.append(red_ntd)




        # geomorphic options
        if self.wid_qual_par.rbt_geo_fix.isChecked()==True:
            self.geo_option =1
        elif self.wid_qual_par.rbt_geo_reg.isChecked()==True:
            self.geo_option =2

            self.w_a = float(self.wid_qual_par.lin_w_a.text())
            self.w_b = float(self.wid_qual_par.lin_w_b.text())
            
            self.d_c = float(self.wid_qual_par.lin_d_c.text())
            self.d_d = float(self.wid_qual_par.lin_d_d.text())
            
            
        #velocity options
        
        if self.wid_qual_par.rbt_vel_fix.isChecked()==True:
            self.vel_option =1
        
        elif self.wid_qual_par.rbt_vel_mann.isChecked()==True:
            self.vel_option =2

        elif self.wid_qual_par.rbt_vel_reg.isChecked()==True:
            self.vel_option =3
            
            self.vel_reg_a = float(self.wid_qual_par.lin_vel_reg_a.text())
            self.vel_reg_b = float(self.wid_qual_par.lin_vel_reg_b.text())
            
        elif self.wid_qual_par.rbt_vel_cont.isChecked()==True:
            self.vel_option =4        
        

        
        
        #ka options
        
        if self.wid_qual_par.rbt_ka_subbasin.isChecked()==True:
            self.ka_option =1
            
        elif self.wid_qual_par.rbt_ka_owens.isChecked()==True:
            self.ka_option =2
        
        elif self.wid_qual_par.rbt_ka_tsivoglou.isChecked()==True:
            self.ka_option =3

        elif self.wid_qual_par.rbt_ka_flores.isChecked()==True:
            self.ka_option =4
            
        elif self.wid_qual_par.rbt_ka_manual.isChecked()==True:
            self.ka_option =5            
            
        #discharge option
        self.q_scn = int(self.wid_qual_par.cbx_q_scn.currentText())

        
        self.lyr_drl = save_parameters_drl(self, self.lyr_drl)
        
        

        
        name = self.wid_qual_par.lin_path_par.text()

      
            
        file = open(str(name), 'w')

        file.write('Initial conditions: \n')
        
        file.write('BOD;' + bod + '; \n')
        file.write('DO;' + do + '; \n')
        file.write('Colif;' + col + '; \n')
        file.write('Org. Phosf.;' + po + '; \n')
        file.write('Inorg. Phosf.;' + pi + '; \n')
        file.write('Org. Nitrogen;' + no + '; \n')
        file.write('Ammon Nitrogen;' + na + '; \n')
        file.write('Nitrate;' + nn + '; \n')
        file.write('DO Saturation;' + do_sat + '; \n')
        file.write('Water temperature;' + temp + '; \n')
        
        
        file.write('Number of subbasins: ;' + str(nsub) +  '; \n')
        
        
        file.write('Parameters by subbasin: \n')
        
        
        str_kds = ""
        str_kdd = ""
        str_ka = ""
        str_kcol = ""
        str_koi = ""
        str_koa = ""
        str_kan = ""
        str_kden = ""
        str_vsmo = ""
        str_vsp = ""
        str_vel = ""
        
        
        for ib in range(nsub):
            str_kds = str_kds + str(self.kds1s[ib]) + ';'
            str_kdd = str_kdd + str(self.kdd1s[ib]) + ';'
            str_ka = str_ka + str(self.kas[ib]) + ';'
            str_kcol = str_kcol + str(self.kcols[ib]) + ';'
            str_koi = str_koi + str(self.kois[ib]) + ';'     
            str_koa = str_koa + str(self.koas[ib]) + ';'
            str_kan = str_kan + str(self.kans[ib]) + ';'
            str_kden = str_kden + str(self.kdens[ib]) + ';'
            str_vsmo = str_vsmo + str(self.vsmos[ib]) + ';'
            str_vsp = str_vsp + str(self.vsps[ib]) + ';'
            str_vel = str_vel + str(self.vels[ib]) + ';'
            
            
        file.write('Kds;' + str_kds + '\n')
        file.write('Kdd;' + str_kdd + '\n')
        file.write('Ka;' + str_ka + '\n')
        file.write('Kcol;' + str_kcol + '\n')
        file.write('Koi;' + str_koi + '\n')
        file.write('Koa;' + str_koa + '\n')
        file.write('Kan;' + str_kan + '\n')
        file.write('Kden;' + str_kden + '\n')
        file.write('Vsmo;' + str_vsmo + '\n')
        file.write('Vsp;' + str_vsp + '\n')
        file.write('Vel;' + str_vel + '\n')
        
        
        file.write('Load adjustment by subbasin: \n')
        

        str_bodp = ""
        str_colp = ""
        str_ptp = ""
        str_ntp = ""
        str_bodd = ""
        str_cold = ""
        str_ptd = ""
        str_ntd = ""


        for ib in range(nsub):
            str_bodp = str_bodp + str(self.red_bodps[ib]) + ';'
            str_colp = str_colp + str(self.red_colps[ib]) + ';'
            str_ptp = str_ptp + str(self.red_ptps[ib]) + ';'
            str_ntp = str_ntp + str(self.red_ntps[ib]) + ';'
            str_bodd = str_bodd + str(self.red_bodds[ib]) + ';'     
            str_cold = str_cold + str(self.red_colds[ib]) + ';'
            str_ptd = str_ptd + str(self.red_ptds[ib]) + ';'
            str_ntd = str_ntd + str(self.red_ntds[ib]) + ';'

            
        file.write('Punctual BOD;' + str_bodp + '\n')
        file.write('Punctual Coli;' + str_colp + '\n')
        file.write('Punctual Pt;' + str_ptp + '\n')
        file.write('Punctual Nt;' + str_ntp + '\n')
        file.write('Diffuse BOD;' + str_bodd + '\n')
        file.write('Diffuse Coli;' + str_cold + '\n')
        file.write('Diffuse Pt;' + str_ptd + '\n')
        file.write('Diffuse Nt;' + str_ntd + '\n')




        
        
        file.write('Geomorphic options: \n')
        
        if self.geo_option==1:
            file.write('default values' +  '\n')

        elif self.geo_option==2:
            file.write('adjusted' + ';' + str(self.w_a) + ';' + str(self.w_b)   + ';' +  str(self.d_c)  + ';' + str(self.d_d)  + ';' +  '\n') 
            
            
            
        file.write('River velocity options: \n')
            
        if self.vel_option==1:
            file.write('fixed' +  '\n')

        elif self.vel_option==2:
            file.write('Manning' +  '\n')
            
        elif self.vel_option==3:
            file.write('regression' + ';' + str(self.vel_reg_a) + ';' + str(self.vel_reg_b)  + ';' +   '\n')            

        elif self.vel_option==4:
            file.write('continuity' +  '\n')

            
        
        file.write('Reaeration coefficient options: \n')
            
        if self.ka_option==1:
            file.write('fixed' +  '\n')

        elif self.ka_option==2:
            file.write('Owens' +  '\n')
            
        elif self.ka_option==3:
            file.write('Tsivoglou' +  '\n')    

        elif self.ka_option==4:
            file.write('Flores' +  '\n')                

        elif self.ka_option==5:
            file.write('Manual' +  '\n')         
        
        file.close()
        
        
        
        QMessageBox.information(self.iface.mainWindow(), 'WARM-GIS Tools', 'Parameter file created successfully. Check the values calculated for each feature in the drainage line file!')
        


        